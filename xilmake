#!/bin/bash

# Jacob Feder jacobsfeder@gmail.com
# 1/29/2018

# automated build system for Zynq SoC projects

# ----------------------------------------------------------
# ----------------------------------------------------------
# ----------------------------------------------------------

usage() { echo "Usage: xilmake [options] [project directory]
Description: Automated build system for Zynq SoC projects.

-------------------------------------------------------------------

Arguments:

	-c, --menuconfig
		Bring up the menu for petalinux configuration
		during compilation. Also copies the generated
		config files into the source directory.

	-d, --download [SD card directory]
		Download boot files to an SD card (e.g. /dev/sdc).
		Does not perform any build steps unless an --from or
		--to option is specified.

	-f,  --from [see below]
		The build step to start at. Assumed to be
		1 if not specified.

	-h, --help
		Show this help menu.

	-i, --ignore
		Skip steps that would rebuild previously completed
		build steps if specified by -from, -to.

	-o, --overwrite
		Overwrite files from previously completed
		build steps if specified by -from, -to.

	-p, --project [name string]
		Use this for different project build variants.

	-t,  --to [see below]
		The build step to stop at (inclusive). Assumed to be the
		last build step if not specified.

-------------------------------------------------------------------

Build steps:

0 or na - if you don't want to perform any build
		  steps use --from na --to na
1 or ip - generate and package IP from source
		  (create Vivado IP projects & package IP)
2 or vg - generate Vivado project from source & IP
		  (import IP, generate main Vivado project
		  from source and block diagram tcl script)
3 or vb - build Vivado project
		  (synthesis + implementation + generate bitstream +
		  export bitstream)
4 or lg - generate linux project
		  (petalinux-create project, petalinux-config,
		  petalinux-create modules/apps)
5 or lc - copy linux sources
		  (copy source files into module/app directories)
6 or lb - build linux project
		  (petalinux-build + petalinux-package)

-------------------------------------------------------------------

Notes:

Supports the following linux rootfs types:
- initramfs
- initrd
- SD boot (however the rootfs will not be automatically updated;
	you must use xilmake -d to download the rootfs to the SD card)

If Vivado build (vb) is run and linux has already been built,
petalinux-package will be run with the most recent bitstream file.
This can decrease build time if only FPGA firmware that doesn't
interface with the PS was modified.

-------------------------------------------------------------------

Examples:

generate & package IP
xilmake -f ip -t ip .
or
xilmake -f 1 -t 1 .
or
xilmake -t1 ~/zynq/cool_project

generate and build Vivado/FPGA design, downloading
the bit file directly without any linux compilation
xilmake -f ip -t vb .

generate and build linux from existing Vivado
hardware design and also bring up manual linux config
xilmake -f lg -t lb -c .

generate and build linux from existing Vivado hardware
design then download boot files to SD card /dev/sdc
xilmake -f lg -d /dev/sdc .

generate and build entire project and download
boot files to SD card
xilmake -tlb -d /dev/sdc .

download previously generated boot files
to SD card /dev/sdb
xilmake -d /dev/sdb ." 1>&2; exit 1; }

# read the options
TEMP=`getopt -o cd:f:hiop:t: --long menuconfig,download:,from:,help,ignore,overwrite,project:,to: -n "xilmake" -- "$@"`
eval set -- "$TEMP"

# TODO linux quick build option that runs script to gcc compile + sftp

# extract options and their arguments into variables.
while true ; do
	case $1 in
		-c|--menuconfig) LINUX_MANUAL_CONFIG=1 ; shift ;;
		-d|--download)
			SD_CARD=$2 ; shift 2 ;;
		-f|--from)
			case $2 in
				0|na) FROM=0 ; shift 2 ;;
				1|ip) FROM=1 ; shift 2 ;;
				2|vg) FROM=2 ; shift 2 ;;
				3|vb) FROM=3 ; shift 2 ;;
				4|lg) FROM=4 ; shift 2 ;;
				5|lc) FROM=5 ; shift 2 ;;
				6|lb) FROM=6 ; shift 2 ;;
				*) echo "Unrecognized --from option $1"; exit 1 ;;
			esac ;;
		-h|--help) usage ; shift ;;
		-i|--ignore) OVERWRITE=2 ; shift ;;
		-o|--overwrite) OVERWRITE=1 ; shift ;;
		-p|--project)
			PROJECT_NAME=$2 ; shift 2 ;;
		-t|--to)
			case $2 in
				0|na) TO=0 ; shift 2 ;;
				1|ip) TO=1 ; shift 2 ;;
				2|vg) TO=2 ; shift 2 ;;
				3|vb) TO=3 ; shift 2 ;;
				4|lg) TO=4 ; shift 2 ;;
				5|lc) TO=5 ; shift 2 ;;
				6|lb) TO=6 ; shift 2 ;;
				*) echo "Unrecognized --to option $1"; exit 1 ;;
			esac ;;
		--) shift ; break ;;
		*) echo "Unrecognized option $1" ; exit 1 ;;
	esac
done

# set defaults

if [[ ! -z $SD_CARD && -z $FROM && -z $FROM ]]; then
	# if SD card is specified but not FROM or TO
	FROM=0
	TO=0
else
	# default build step to start at
	if [[ -z $FROM ]]; then
		FROM=1
	fi

	# default build step to stop at
	if [[ -z $TO ]]; then
		TO=6
	fi
fi

if [[ -z  $LINUX_MANUAL_CONFIG ]]; then
	# whether linux config menu should be brought up during build
	# 0 to use default configs, 1 to bring up dialog
	LINUX_MANUAL_CONFIG=0
fi

if [[ -z  $OVERWRITE ]]; then
	# if requested to build something that already exists
	# 0 to ask, 1 to overwrite, anything else to skip
	OVERWRITE=0
fi

if [[ -z $1 ]]; then
	echo "No project directory specified"
	exit 1
fi

OG_DIR=$PWD
TOP_DIR=$(readlink -f $1)

# source project settings
source $TOP_DIR"/settings.sh"

if [[ -z $PROJECT_NAME ]]; then
	PROJECT_NAME=$DEFAULT_PROJECT_NAME
fi

PROJECT_BUILD_DIR=$TOP_DIR"/build/"$PROJECT_NAME
IP_PROJECT_NAME=$PROJECT_NAME"_IP"
IP_PROJECT_DIR=$PROJECT_BUILD_DIR"/"$IP_PROJECT_NAME
VIVADO_PROJECT_NAME=$PROJECT_NAME"_hw"
VIVADO_PROJECT_DIR=$PROJECT_BUILD_DIR"/"$VIVADO_PROJECT_NAME
HDF_FILE=$VIVADO_PROJECT_DIR"/"$PROJECT_NAME".hdf"
BIT_FILE=$VIVADO_PROJECT_DIR"/"$PROJECT_NAME".bit"
LINUX_PROJECT_NAME=$PROJECT_NAME"_linux"
LINUX_PROJECT_DIR=$PROJECT_BUILD_DIR"/"$LINUX_PROJECT_NAME

if ! [[ -d $TOP_DIR ]]; then
	echo "Specified project directory $1 does not exist"
	exit 1
fi

if ! [[ -e $TOP_DIR"/settings.sh" ]]; then
	echo "Specified project directory has no settings.sh file"
	echo $TOP_DIR"/settings.sh"
	exit 1
fi

START_TIME="$(date -u +%s)"

# add required tools to PATH
if ! [[ $FROM -gt 3 || $TO -lt 1 ]]; then
	source $VIVADO_INSTALL_DIR"/settings64.sh"
fi
if [[ ! ( $FROM -gt 6 || $TO -lt 4 ) ]]; then
	source $PETALINUX_INSTALL_DIR"/settings.sh" $PETALINUX_INSTALL_DIR
fi

# create main build directory
if [[ ! -e $PROJECT_BUILD_DIR ]]; then
	mkdir -p $PROJECT_BUILD_DIR
fi

# generate and package project-specific IP from source
if [[ $FROM -le 1 && $TO -ge 1 ]]; then
	# check if step has already been performed
	if [[ -e $IP_PROJECT_DIR ]]; then
		if [[ $OVERWRITE -eq 0 ]]; then
			# ask to overwrite
			read -p "Overwrite previously generated IP? (y / n)" yn
			case $yn in
				[Yy]* ) OVERWRITE=1 ;;
				* ) OVERWRITE=0 ;;
			esac
		fi

		if [[ $OVERWRITE -eq 1 ]]; then
			# overwrite
			rm -rf $IP_PROJECT_DIR
			SKIP=0
		else
			# skip
			echo "--------------------------------"
			echo "Skipping IP generation/packaging"
			echo "--------------------------------"
			SKIP=1
		fi
	else
		SKIP=0
	fi

	if [[ $SKIP -eq 0 ]]; then
		echo "---------------------------"
		echo "Generating and packaging IP"
		echo "---------------------------"

		mkdir $IP_PROJECT_DIR

		cd $TOP_DIR"/src/hdl/ip"
		for ip_src_dir in */ ; do
			echo "Building IP "$ip_src_dir
			echo "-----------------"
			
			expanded_ip_src_dir=$(readlink -f $TOP_DIR"/src/hdl/ip/"$ip_src_dir)
			
			vivado -mode batch -nojournal -nolog -notrace -source $ip_src_dir"generate.tcl" -tclargs $IP_PROJECT_DIR $expanded_ip_src_dir $BOARD_NAME
			
			echo "Built IP "$ip_src_dir
			echo "-----------------"
		done
	fi
fi

# generate Vivado project from source & IP
if [[ $FROM -le 2 && $TO -ge 2 ]]; then
	# check if step has already been performed
	if [[ -e $VIVADO_PROJECT_DIR ]]; then
		if [[ $OVERWRITE -eq 0 ]]; then
			# ask to overwrite
			read -p "Overwrite previously generated Vivado project? (y / n)" yn
			case $yn in
				[Yy]* ) OVERWRITE=1 ;;
				* ) OVERWRITE=0 ;;
			esac
		fi

		if [[ $OVERWRITE -eq 1 ]]; then
			# overwrite
			rm -rf $VIVADO_PROJECT_DIR
			SKIP=0
		else
			# skip
			echo "----------------------------------"
			echo "Skipping Vivado project generation"
			echo "----------------------------------"
			SKIP=1
		fi
	else
		SKIP=0
	fi

	if [[ $SKIP -eq 0 ]]; then
		echo "-------------------------"
		echo "Generating Vivado project"
		echo "-------------------------"

		mkdir $VIVADO_PROJECT_DIR

		vivado -mode batch -nojournal -nolog -notrace -source $TOP_DIR"/src/hdl/generate.tcl" -tclargs $VIVADO_PROJECT_NAME $PROJECT_BUILD_DIR $IP_PROJECT_DIR $TOP_DIR"/src/hdl/" $BOARD_NAME $VIVADO_GENERATE_ARGS
	fi
fi

# build Vivado project
if [[ $FROM -le 3 && $TO -ge 3 ]]; then
	# check if step has already been performed
	if [[ -e $HDF_FILE ]]; then
		if [[ $OVERWRITE -eq 0 ]]; then
			# ask to overwrite
			read -p "Overwrite previous Vivado project build? (y / n)" yn
			case $yn in
				[Yy]* ) OVERWRITE=1 ;;
				* ) OVERWRITE=0 ;;
			esac
		fi

		if [[ $OVERWRITE -eq 1 ]]; then
			# overwrite
			rm -rf $VIVADO_PROJECT_DIR"/"$VIVADO_PROJECT_NAME".runs"
			rm -f $HDF_FILE
			SKIP=0
		else
			# skip
			echo "-----------------------------"
			echo "Skipping Vivado project build"
			echo "-----------------------------"
			SKIP=1
		fi
	else
		SKIP=0
	fi

	if [[ $SKIP -eq 0 ]]; then
		echo "-----------------------"
		echo "Building Vivado project"
		echo "-----------------------"
		
		echo "open_project "$VIVADO_PROJECT_DIR"/"$VIVADO_PROJECT_NAME".xpr" \
			 $'\nlaunch_runs synth_1 -jobs 8\nwait_on_run synth_1\nlaunch_runs impl_1 -jobs 8' \
			 $'\nwait_on_run impl_1\nlaunch_runs impl_1 -to_step write_bitstream -jobs 8\nwait_on_run impl_1' > $PROJECT_BUILD_DIR"/build.tcl"
		vivado -mode batch -nojournal -nolog -notrace -source $PROJECT_BUILD_DIR"/build.tcl"

		cp -f $VIVADO_PROJECT_DIR"/"$VIVADO_PROJECT_NAME".runs/impl_1/"$VIVADO_PROJECT_NAME"_wrapper.sysdef" $HDF_FILE
		cp -f $VIVADO_PROJECT_DIR"/"$VIVADO_PROJECT_NAME".runs/impl_1/"$VIVADO_PROJECT_NAME"_wrapper.bit" $BIT_FILE

		rm -f $PROJECT_BUILD_DIR"/build.tcl"


		# if linux has already been built and won't be rebuilt,
		# petalinux-package to copy over the new bit file
		if [[ -e $LINUX_PROJECT_DIR"/images/linux/" && $TO -lt 6 ]]; then
			echo "-----------------------"
			echo "Packaging Linux project"
			echo "-----------------------"

			cd $LINUX_PROJECT_DIR

			# begin virtual python environment to force python2 usage for bitbake
			virtualenv -p /usr/bin/python2.7 --distribute temp-python
			source temp-python/bin/activate

			# package boot files
			petalinux-package --boot --fsbl $LINUX_PROJECT_DIR"/images/linux/zynq_fsbl.elf" --fpga $BIT_FILE --u-boot --force	

			# stop & remove virtual python environment
			deactivate
			rm -rf temp-python
		fi
	fi
fi

# generate linux project
if [[ $FROM -le 4 && $TO -ge 4 ]]; then
	# check if step has already been performed
	if [[ -e $LINUX_PROJECT_DIR ]]; then
		if [[ $OVERWRITE -eq 0 ]]; then
			# ask to overwrite
			read -p "Overwrite previously generated linux project? (y / n)" yn
			case $yn in
				[Yy]* ) OVERWRITE=1 ;;
				* ) OVERWRITE=0 ;;
			esac
		fi

		if [[ $OVERWRITE -eq 1 ]]; then
			# overwrite
			rm -rf $LINUX_PROJECT_DIR
			SKIP=0
		else
			# skip
			echo "-------------------------------"
			echo "Skipping Linux project generate"
			echo "-------------------------------"
			SKIP=1
		fi
	else
		SKIP=0
	fi

	if [[ $SKIP -eq 0 ]]; then
		echo "------------------------"
		echo "Generating Linux project"
		echo "------------------------"
		
		cd $PROJECT_BUILD_DIR

		# create petalinux project
		petalinux-create --type project --template zynq --name $LINUX_PROJECT_NAME
		cd $LINUX_PROJECT_DIR

		# configure petalinux
		if [[ $LINUX_MANUAL_CONFIG != 0 ]]; then
			petalinux-config --get-hw-description=$VIVADO_PROJECT_DIR
			petalinux-config -c kernel 
			petalinux-config -c rootfs
			# copy generated config files to src folder
			cp -f -v $LINUX_PROJECT_DIR"/project-spec/configs/config" $TOP_DIR"/src/linux/config/config-last"
			cp -f -v $LINUX_PROJECT_DIR"/project-spec/configs/rootfs_config" $TOP_DIR"/src/linux/config/rootfs_config-last"
		else
			petalinux-config --get-hw-description=$VIVADO_PROJECT_DIR --oldconfig
			petalinux-config -c rootfs --oldconfig

			if [[ -e $TOP_DIR"/src/linux/config/config" ]]; then
				cp -f -v $TOP_DIR"/src/linux/config/config" $LINUX_PROJECT_DIR"/project-spec/configs/"
			fi
			if [[ -e $TOP_DIR"/src/linux/config/rootfs_config" ]]; then
				cp -f -v $TOP_DIR"/src/linux/config/rootfs_config" $LINUX_PROJECT_DIR"/project-spec/configs/"
			fi
			if [[ -e $TOP_DIR"/src/linux/config/kernel_config" ]]; then
				petalinux-config -c kernel --defconfig=$TOP_DIR"/src/linux/config/kernel_config"
			fi
		fi

		# generate apps/modules
		source $TOP_DIR"/src/linux/generate.sh"
	fi
fi

# copy sources into linux project
if [[ $FROM -le 5 && $TO -ge 5 ]]; then
	echo "----------------------------------"
	echo "Copying sources into Linux project"
	echo "----------------------------------"
	
	# copy source files into project
	source $TOP_DIR"/src/linux/copy.sh" $TOP_DIR"/src/linux" $LINUX_PROJECT_DIR
fi

# build petalinux project from existing configured project directory
if [[ $FROM -le 6 && $TO -ge 6 ]]; then
	echo "----------------------"
	echo "Building Linux project"
	echo "----------------------"

	cd $LINUX_PROJECT_DIR

	# begin virtual python environment to force python2 usage for bitbake
	virtualenv -p /usr/bin/python2.7 --distribute temp-python
	source temp-python/bin/activate

	# build petalinux
	petalinux-build

	# package boot files
	petalinux-package --boot --fsbl $LINUX_PROJECT_DIR"/images/linux/zynq_fsbl.elf" --fpga $LINUX_PROJECT_DIR"/images/linux/system.bit" --u-boot --force

	# stop & remove virtual python environment
	deactivate
	rm -rf temp-python
fi

# download boot files to SD card
if [[ ! -z $SD_CARD ]]; then
	echo "------------------------------------------"
	echo "Downloading boot files to SD card "$SD_CARD
	echo "------------------------------------------"

	# SD card partition mount locations
	BOOT_DIR=/mnt/BOOT
	ROOTFS_DIR=/mnt/rootfs

	# unmount and remove all partitions
	partitions=($SD_CARD?)
	if [[ "$partitions" != $SD_CARD\? ]]; then
		for ((i=${#partitions[@]}-1; i>=0; i--)); do
			sudo umount "${partitions[$i]}"
			sudo parted $SD_CARD rm "${partitions[$i]: -1}"
		done
	fi

	# create partition table
	sudo parted $SD_CARD -s mklabel msdos

	# create boot partition
	sudo parted $SD_CARD mkpart primary fat32 4MiB 516MiB
	# create rootfs partition
	sudo parted $SD_CARD mkpart primary ext4 516MiB 100%

	# format boot as fat32
	sudo mkfs.fat -F32 -n BOOT $SD_CARD"1"
	# format rootfs as ext4
	sudo mkfs.ext4 -F -L rootfs $SD_CARD"2"

	# mount boot partition
	sudo mkdir -p $BOOT_DIR
	sudo mount $SD_CARD"1" $BOOT_DIR

	# mount rootfs partition
	sudo mkdir -p $ROOTFS_DIR
	sudo mount $SD_CARD"2" $ROOTFS_DIR

	# copy FSBL, u-boot, bitstream into boot partition
	sudo cp -f $LINUX_PROJECT_DIR"/images/linux/BOOT.BIN" $BOOT_DIR
	# add additional u-boot environment variables into boot partition
	echo 'uenvcmd=if test -n ${ipaddr}; then tftpboot ${clobstart} system.bit; fpga loadb 0 ${clobstart} ${filesize}; run update_boot; run update_kernel; else echo "No ethernet connection, skipping TFTP update..."; fi' | sudo tee $BOOT_DIR"/uEnv.txt"

	# copy kernel into boot partition
	sudo cp -f $LINUX_PROJECT_DIR"/images/linux/image.ub" $BOOT_DIR

	# decompress linux into rootfs partition
	sudo tar -xzf $LINUX_PROJECT_DIR"/images/linux/rootfs.tar.gz" -C $ROOTFS_DIR

	# unmount partitions
	sudo umount $SD_CARD"2"
	sudo umount $SD_CARD"1"
	sudo rm -rf $BOOT_DIR
	sudo rm -rf $ROOTFS_DIR
fi

END_TIME="$(date -u +%s)"
ELAPSED_TIME="$(($END_TIME-$START_TIME))"
((HOURS=${ELAPSED_TIME} / 3600))
((MINUTES=(${ELAPSED_TIME} % 3600) / 60))
((SECONDS=${ELAPSED_TIME} % 60))
printf "Build complete - run time %02d:%02d:%02d\n" $HOURS $MINUTES $SECONDS

cd $OG_DIR